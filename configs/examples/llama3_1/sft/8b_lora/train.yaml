##############################################
# Training Parameters : LoRA SFT of Llama3.1 #
##############################################

# We replicate the training parameters of:
# https://github.com/pytorch/torchtune/blob/main/recipes/configs/llama3_1/8B_lora_single_device.yaml

# Except:
# 1. We finetune the *base* Llama 3.1 model - not the already instruction-tuned one.
# 2. We apply a max sequence length of 8192.
# 3. Because we intend to train with 4 A100-GPUs (instead of 2) to maintain the
# effective batch size of 128 - we reduce the grad_accumulation to 16 (instead of 32).

model:
  model_name: "meta-llama/Meta-Llama-3.1-8B"
  chat_template: "chat_ml"
  model_max_length: 8192
  torch_dtype_str: "bfloat16"
  attn_implementation: "sdpa"
  trust_remote_code: True

data:
  train:
    datasets:
      - dataset_name: "yahma/alpaca-cleaned"
        shuffle: True
    target_col: "prompt"
    seed: 123

training:
  trainer_type: TRL_SFT
  num_train_epochs: 1
  per_device_train_batch_size: 2
  gradient_accumulation_steps: 16
  learning_rate: 3.0e-4
  warmup_steps: 100
  lr_scheduler_type: "cosine"
  optimizer: "adamw_torch_fused"
  weight_decay: 0.01
  enable_gradient_checkpointing: True
  gradient_checkpointing_kwargs:
    use_reentrant: False
  seed: 123
  ddp_find_unused_parameters: False
  use_peft: True
  save_steps: 0
  save_epoch: True
  logging_steps: 50
  logging_first_step: True
  log_model_summary: True
  include_performance_metrics: True
  enable_wandb: True

peft:
  lora_r: 8
  lora_alpha: 16
  lora_dropout: 0.0
  lora_target_modules:
    - "q_proj"
    - "v_proj"
