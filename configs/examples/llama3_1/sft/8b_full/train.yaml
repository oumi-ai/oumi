##############################################
# Training Parameters : Full SFT of Llama3.1 #
##############################################

# We borrow some training parameters from:
# https://github.com/pytorch/torchtune/blob/main/recipes/configs/llama3_1/8B_full.yaml

# However there also some key differences:
# 1. We SFT the *base* Llama3.1 model
# 2. We use an effective batch size of 128 utilizing gradient accumulation.
#         128 = 2 * 16 * 4 = (per_device_batch_size) * (grad_accumulation) * (GPUS).
# 3. We use a warmup ratio and a cosine lr scheduler and apply the chat-ml template to preprocess the alpaca dataset.

# The above changes were inspired by the llama-recipes:
# https://github.com/meta-llama/llama-recipes/tree/main/src/llama_recipes/configs
# and, the original's authors alpaca training:
# https://github.com/tatsu-lab/stanford_alpaca?tab=readme-ov-file#fine-tuning

model:
  model_name: "meta-llama/Meta-Llama-3.1-8B"
  chat_template: "chat_ml"
  model_max_length: 8192
  torch_dtype_str: "bfloat16"
  attn_implementation: "sdpa"
  trust_remote_code: True

data:
  train:
    datasets:
      - dataset_name: "yahma/alpaca-cleaned"
        preprocessing_function_name: "alpaca"
        shuffle: True
    target_col: "prompt"
    seed: 123

training:
  trainer_type: TRL_SFT
  num_train_epochs: 3
  per_device_train_batch_size: 2
  gradient_accumulation_steps: 16
  enable_gradient_checkpointing: False # TODO: Activated via FSDP - not clean.
  gradient_checkpointing_kwargs:
    use_reentrant: False               # TODO: what happens if this is not passed?
  learning_rate: 2.0e-05
  warmup_ratio: 0.03
  lr_scheduler_type: "cosine"
  optimizer: "adamw_torch_fused"
  seed: 123
  save_steps: 0
  save_epoch: True
  logging_steps: 50
  logging_first_step: True
  log_model_summary: True
  include_performance_metrics: True
  enable_wandb: True
