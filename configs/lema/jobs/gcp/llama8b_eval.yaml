# Config to eval Llama 3.1 8B Instruct on GCP.
name: llama8b-eval

resources:
  cloud: gcp
  accelerators: "A100"
  use_spot: true

# Upload working directory to remote ~/sky_workdir.
working_dir: .

# Mount local files.
file_mounts:
  ~/.netrc: ~/.netrc  # WandB credentials
  # Mount HF token, which is needed to download locked-down models from HF Hub.
  # This is created on the local machine by running `huggingface-cli login`.
  ~/.cache/huggingface/token: ~/.cache/huggingface/token
  # See https://github.com/openlema/lema/wiki/Clouds-Setup#mounting-gcs-buckets
  # for documentation on using GCS buckets.
  /output_dir_gcs:
    source: gs://lema-dev-us-central1
    store: gcs
    mode: MOUNT

envs:
  WANDB_PROJECT: lema-eval
  # HF datasets require trusting remote code to be enabled.
  HF_DATASETS_TRUST_REMOTE_CODE: 1

setup: |
  set -e
  pip install '.[train]'
  pip install flash-attn --no-build-isolation
  # Install model from HF Hub. This tool increases download speed compared to
  # downloading the model during eval.
  pip install hf_transfer
  HF_HUB_ENABLE_HF_TRANSFER=1 huggingface-cli download meta-llama/Meta-Llama-3.1-8B-Instruct

run: |
  set -e  # Exit if any command failed.
  source ./configs/skypilot/sky_init.sh

  # NOTE: For SFT, update this to point to your model checkpoint.
  MODEL_CHECKPOINT_DIR="meta-llama/Meta-Llama-3.1-8B-Instruct"
  # NOTE: For LoRA, update this to point to your LoRA adapter.
  LORA_ADAPTER_DIR=""

  echo "Starting evaluation for ${EVAL_CHECKPOINT_DIR} ..."

  set -x # Enable command tracing.
  python -m lema.evaluate \
        -c configs/lema/llama8b.eval.yaml \
        "model.model_name=${MODEL_CHECKPOINT_DIR}" \
        "model.adapter_model=${LORA_ADAPTER_DIR}"
