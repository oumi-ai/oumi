# Config to FSDP QLoRA tune Llama 3.1 405B Instruct.
# Example command:
# oumi launch up -c configs/recipes/llama3_1/sft/405b_qlora/gcp_job.yaml --cluster llama405b-qlora-fsdp
name: llama405b-qlora-fsdp

resources:
  cloud: gcp
  accelerators: "A100-80GB:8"
  use_spot: true
  disk_size: 4000 # Disk size in GBs
  region: us-central1

working_dir: .

file_mounts:
  ~/.netrc: ~/.netrc  # WandB credentials
  # Mount HF token, which is needed to download locked-down models from HF Hub.
  # This is created on the local machine by running `huggingface-cli login`.
  ~/.cache/huggingface/token: ~/.cache/huggingface/token

envs:
  WANDB_PROJECT: oumi-train
  OUMI_RUN_NAME: llama405b.qlora.fsdp
  ACCELERATE_LOG_LEVEL: info
  # https://github.com/huggingface/tokenizers/issues/899#issuecomment-1027739758
  TOKENIZERS_PARALLELISM: false
  # https://pytorch.org/docs/stable/notes/cuda.html#optimizing-memory-usage-with-pytorch-cuda-alloc-conf
  PYTORCH_CUDA_ALLOC_CONF: "garbage_collection_threshold:0.8,max_split_size_mb:128"

setup: |
  set -e
  pip install uv && uv pip install '.[gpu]' hf_transfer
  # Download the model from HF.
  # We exclude original/* because it contains two redundant copies of the model weights.
  HF_HUB_ENABLE_HF_TRANSFER=1 huggingface-cli download meta-llama/Meta-Llama-3.1-405B-Instruct --exclude original/*

run: |
  set -e  # Exit if any command failed.
  source ./configs/examples/misc/sky_init.sh

  set -x
  oumi distributed torchrun \
      -m oumi train \
      -c configs/recipes/llama3_1/sft/405b_qlora/train.yaml \
      --training.run_name "${OUMI_RUN_NAME}.${SKYPILOT_TASK_ID}"

  echo "Node ${SKYPILOT_NODE_RANK} is all done!"
