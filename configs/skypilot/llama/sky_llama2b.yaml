name: lema-train-example

resources:
  # Use 1 of the following GPUs depending on availability. No preference.
  # To view other GPU types use the following commands:
  # `sky show-gpus`, `sky show-gpus -a`
  accelerators: {"A100"}  # "A100-80GB-SXM", "H100-80GB-SXM", "A100-80GB", "H100-80GB"
  # To configure single-node, multi-gpu (N GPUs) training, set `accelerators:` above to
  # something like this: {"A40": N}
  any_of:
    - use_spot: true
    - use_spot: false

# Upload a working directory to remote ~/sky_workdir.
workdir: .

# Upload local files.
file_mounts:
  ~/.netrc: ~/.netrc  # mount local netrc file to access private repos
  ~/.cache/huggingface/token: ~/.cache/huggingface/token  # mount HF token
  # /artifacts:
  #   name: lema-dev-private # Not available on lambda
  #   mode: MOUNT

envs:
  WANDB_PROJECT: lema-train-test
  LEMA_RUN_NAME: llama2b.pt

setup: |
  set -e
  pip install '.[train]'
  # FLASH_ATTENTION_SKIP_CUDA_BUILD=TRUE pip install flash-attn --no-build-isolation
  pip install flash-attn --no-build-isolation
  # Install model from HF Hub. This tool increases download speed compared to
  # downloading the model during training.
  pip install huggingface_hub[hf_transfer]
  HF_HUB_ENABLE_HF_TRANSFER=1 huggingface-cli download meta-llama/Meta-Llama-3.1-8B

run: |
  set -e  # Exit if any command failed.

  # Run some checks, and export "LEMA_*" env vars
  source ./configs/skypilot/sky_init.sh
  # pip install '.[train]'

  set -x  # Print "torchrun" command with expanded variables
  # torchrun \
  #     --nnodes=${LEMA_NUM_NODES} \
  #     --node-rank=${SKYPILOT_NODE_RANK} \
  #     --nproc-per-node=${SKYPILOT_NUM_GPUS_PER_NODE} \
  #     --master-addr=${LEMA_MASTER_ADDR} \
  #     --master-port=8007 \
  python \
      -m lema.train \
      -c configs/lema/llama2b.pt.yaml \
      "data.train.experimental_use_async_dataset=true" \
      "model.model_name=meta-llama/Meta-Llama-3.1-8B" \
      "model.model_max_length=8192" \
      "training.trainer_type=LEMA" \
      "training.optimizer=adafactor" \
      "training.per_device_train_batch_size=1" \
      "training.gradient_accumulation_steps=1" \
      "training.enable_gradient_checkpointing=true" \
      "training.compile=false" \
      "training.max_steps=2" \
      "training.save_steps=100" \
      "training.save_final_model=false" \
      "training.dataloader_num_workers=auto" \
      "training.dataloader_prefetch_factor=32" \
      "training.include_performance_metrics=true" \
      "training.ddp_find_unused_parameters=false" \
      "training.try_resume_from_last_checkpoint=false" \
      "training.run_name='${LEMA_RUN_NAME}.${SKYPILOT_TASK_ID}'" \
      "training.enable_wandb=true"

  echo "Node ${SKYPILOT_NODE_RANK} is all done!"
