#!/usr/bin/env bash
# Copyright 2025 - Oumi
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -euo pipefail

# Default values
CONFIG=""
HOST="0.0.0.0"
PORT="8000"
SYSTEM_PROMPT=""
USE_AICHAT=false
AICHAT_MODEL=""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() { echo -e "${BLUE}â„¹${NC} $1"; }
print_success() { echo -e "${GREEN}âœ“${NC} $1"; }
print_warning() { echo -e "${YELLOW}âš ${NC} $1"; }
print_error() { echo -e "${RED}âœ—${NC} $1"; }

# Function to show help
show_help() {
    cat << EOF
ðŸ¤– Oumi Chat - Beautiful terminal frontend for Oumi inference

USAGE:
    oumi-chat [OPTIONS] -c CONFIG_FILE

OPTIONS:
    -c, --config CONFIG     Path to inference configuration file (required)
    -h, --host HOST         Server host (default: 0.0.0.0)
    -p, --port PORT         Server port (default: 8000)
    -s, --system-prompt TEXT System prompt for the model
    --use-aichat           Use AIChat TUI client (requires aichat installed)
    --aichat-model MODEL   Model name to use with AIChat (optional)
    --help                 Show this help message

EXAMPLES:
    # Use enhanced interactive mode (Rich formatting)
    oumi-chat -c configs/recipes/llama/inference/8b_native.yaml

    # Use AIChat TUI (requires aichat to be installed)
    oumi-chat -c configs/recipes/llama/inference/8b_native.yaml --use-aichat

    # Custom host and port
    oumi-chat -c my_config.yaml -h localhost -p 9000

    # With system prompt
    oumi-chat -c my_config.yaml -s "You are a helpful coding assistant."

INSTALLATION:
    # To use AIChat TUI client, install it with:
    cargo install aichat

    # Or via package managers:
    brew install aichat       # macOS
    pacman -S aichat         # Arch Linux

EOF
}

# Function to check if aichat is installed
check_aichat() {
    if ! command -v aichat &> /dev/null; then
        print_error "AIChat is not installed. Please install it first:"
        echo "  cargo install aichat"
        echo "  # or"
        echo "  brew install aichat  # macOS"
        echo "  pacman -S aichat     # Arch Linux"
        exit 1
    fi
}

# Function to start Oumi server in background
start_oumi_server() {
    local config="$1"
    local host="$2"
    local port="$3"
    local system_prompt="$4"

    print_info "Starting Oumi inference server..."

    # Build the command
    local cmd="oumi infer --server-mode --host $host --port $port -c \"$config\""
    if [[ -n "$system_prompt" ]]; then
        cmd="$cmd --system-prompt \"$system_prompt\""
    fi

    # Start server in background
    eval "$cmd" &
    local server_pid=$!

    # Wait for server to be ready
    print_info "Waiting for server to start..."
    local attempts=0
    local max_attempts=30

    while ! curl -s "http://$host:$port/health" > /dev/null 2>&1; do
        sleep 1
        attempts=$((attempts + 1))
        if [[ $attempts -ge $max_attempts ]]; then
            print_error "Server failed to start after $max_attempts seconds"
            kill $server_pid 2>/dev/null || true
            exit 1
        fi
    done

    print_success "Server is ready at http://$host:$port"
    echo "$server_pid"
}

# Function to configure AIChat
configure_aichat() {
    local host="$1"
    local port="$2"
    local model="$3"

    # Create AIChat config if it doesn't exist
    local config_dir="$HOME/.config/aichat"
    local config_file="$config_dir/config.yaml"

    mkdir -p "$config_dir"

    # Backup existing config if it exists
    if [[ -f "$config_file" ]]; then
        cp "$config_file" "$config_file.backup.$(date +%s)"
        print_info "Backed up existing AIChat config"
    fi

    # Create new config for Oumi
    cat > "$config_file" << EOF
model: openai:${model:-oumi-model}
clients:
- type: openai
  api_base: http://$host:$port/v1
  api_key: dummy-key-not-needed
  models:
  - name: ${model:-oumi-model}
    max_input_tokens: 4096
    max_output_tokens: 4096

# UI Configuration
keybindings: emacs
wrap: auto
wrap_code: true
light_theme: false

# Conversation settings
temperature: 0.7
save_session: true
EOF

    print_success "AIChat configured to use Oumi server"
}

# Function to run AIChat
run_aichat() {
    local model="$1"

    print_info "Starting AIChat TUI..."
    print_info "ðŸ”§ Use .model to switch models"
    print_info "ðŸ”§ Use .info to see current settings"
    print_info "ðŸ”§ Use .help for all commands"
    print_info "ðŸ›‘ Use .exit or Ctrl+C to quit"
    echo

    if [[ -n "$model" ]]; then
        aichat --model "openai:$model"
    else
        aichat --model "openai:oumi-model"
    fi
}

# Function to cleanup on exit
cleanup() {
    if [[ -n "${SERVER_PID:-}" ]]; then
        print_info "Stopping Oumi server..."
        kill "$SERVER_PID" 2>/dev/null || true
        wait "$SERVER_PID" 2>/dev/null || true
        print_success "Server stopped"
    fi
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -c|--config)
            CONFIG="$2"
            shift 2
            ;;
        -h|--host)
            HOST="$2"
            shift 2
            ;;
        -p|--port)
            PORT="$2"
            shift 2
            ;;
        -s|--system-prompt)
            SYSTEM_PROMPT="$2"
            shift 2
            ;;
        --use-aichat)
            USE_AICHAT=true
            shift
            ;;
        --aichat-model)
            AICHAT_MODEL="$2"
            shift 2
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Check if config is provided
if [[ -z "$CONFIG" ]]; then
    print_error "Configuration file is required"
    show_help
    exit 1
fi

# Check if config file exists
if [[ ! -f "$CONFIG" ]]; then
    print_error "Configuration file not found: $CONFIG"
    exit 1
fi

# Main execution
main() {
    print_success "ðŸ¤– Oumi Chat - Beautiful Terminal Frontend"
    echo

    # Set up signal handling for cleanup
    trap cleanup EXIT INT TERM

    if [[ "$USE_AICHAT" == "true" ]]; then
        # Use AIChat mode
        check_aichat

        # Start Oumi server
        SERVER_PID=$(start_oumi_server "$CONFIG" "$HOST" "$PORT" "$SYSTEM_PROMPT")

        # Configure AIChat
        configure_aichat "$HOST" "$PORT" "$AICHAT_MODEL"

        # Run AIChat
        run_aichat "$AICHAT_MODEL"
    else
        # Use enhanced interactive mode
        print_info "Using enhanced interactive mode with Rich formatting"

        local cmd="oumi infer --interactive -c \"$CONFIG\""
        if [[ -n "$SYSTEM_PROMPT" ]]; then
            cmd="$cmd --system-prompt \"$SYSTEM_PROMPT\""
        fi

        eval "$cmd"
    fi
}

# Check if running as script (not being sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
