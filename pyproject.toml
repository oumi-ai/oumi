[build-system]
requires = ["setuptools>=64", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[tool.setuptools.package-data]
oumi = ["LICENSE", "README.md", "*.jinja"]

[tool.setuptools_scm]
# default scm config.

[tool.setuptools]
# default setuptools config.

[project]
name = "oumi"
dynamic = ["version"]
readme = "README.md"
requires-python = ">=3.8"
description = "Oumi - Modeling Platform"
authors = [{ name = "Oumi Team", email = "contact@learning-machines.ai" }]
license = { file = "LICENSE" }
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "accelerate>=1.0.0",
    "aiohttp",                      # Used by infererence engine
    "aioresponses",                 # User by inference engine tests
    "datasets",
    "jsonlines",
    "numpy",
    "omegaconf",
    "pandas",
    "peft",
    "pexpect",                      # Used by Polaris client
    "pillow",                       # Used by image datasets
    "pydantic>=2",
    "skypilot",                     # Used by launcher
    "torch",
    "torchdata>=0.8.0",             # Used by data pipes loader
    "tqdm",
    "transformers>=4.43.1,<4.44.0",
    "trl>=0.9.0",
    "typer",                        # Used by CLI
    "typing_extensions",            # Backports of typing updates to python 3.8
]

[project.urls]
Homepage = "https://github.com/oumi-ai/oumi"
Issues = "https://github.com/oumi-ai/oumi/issues"

[project.optional-dependencies]
dev = [
    "ipywidgets", # Interactive widgets for Jupyter notebooks
    "jupyterlab",
    "pre-commit",
    "pyright",
    "pytest-cov", # Test coverage plugin for pytest
    "pytest",
    "ruff",
    "torchfix",   # Tool for automatically fixing common PyTorch issues
]
# TODO: train target will be removed in a future release
train = [
    "openai",       # TODO: remove this dependency, only used in scripts/polaris/jobs/python/vllm_inference.py
    "bitsandbytes", # Used for QLora, and PagedAdam implemenation
    # "llama-cpp-python",             # for local cpu inference. TODO: resolve install issues
    "lm-eval==0.4.3", # OPE-390
    "tensorboard",
    "wandb<0.17.8",
]
# Dependencies that require a GPU to install
gpu = ["liger-kernel", "nvidia-ml-py", "vllm"]
docs = [
    "myst_parser",       # Allows us to write docs in markdown
    "nbsphinx",          # Allows us to include ipython notebooks in the docs
    "sphinx",            # Used to build the docs
    "sphinx-rtd-theme",  # Readthedocs theme for Sphinx
    "sphinx_copybutton", # Add copy button to code blocks in Sphinx
]

# Targets for supportedcloud providers
aws = ["skypilot[aws]"]
azure = ["skypilot[azure]"]
gcp = [
    "google-api-core>=2.19.0",
    "google-api-python-client",
    "google-auth>=2.30.0",
    "google-cloud-core>=2.4.1",
    "google-cloud-storage>=2.17.0",
    "skypilot[gcp]",
]
lambda = ["skypilot[lambda]"]
runpod = ["skypilot[runpod]"]

# TODO: Deprecated, will be removed in a future release
all = ["oumi[dev,train,azure,gcp,lambda,runpod,docs]"]

[project.scripts]
oumi-evaluate = "oumi.evaluate:main"
oumi-infer = "oumi.infer:main"
oumi-launch = "oumi.launch:main"
oumi-train = "oumi.train:main"
oumi = "oumi.core.cli.main:run"

[tool.ruff]
extend-include = [
    "*.ipynb", # Include ipython notebooks
]
line-length = 88

[tool.ruff.lint]
select = [
    "F",   # pyflakes: detect various errors
    "E",   # pycodestyle: errors
    "W",   # pycodestyle: warnings
    "I",   # isort: check import order
    "D",   # pydocstyle: check docstring style
    "TID", # flake8-tidy-imports: check import tidiness
    "NPY", # NumPy-specific rules
]
ignore = [
    "D100",   # Missing docstring in public module, temporary, OPE-326
    "D101",   # Missing docstring in public class, temporary, OPE-326
    "NPY002", # Replace legacy numpy aliases
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all" # Disallow all relative imports.

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"] # Ignore docstring checks in tests

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["oumi"]

[tool.pyright]
include = ["src/oumi/**", "tests/**"]
exclude = ["src/oumi/experimental/**"]
typeCheckingMode = "basic"
pythonVersion = "3.8"
pythonPlatform = "All"                 # Include linux, mac, windows

reportPrivateImportUsage = "none"

[tool.pytest.ini_options]
testpaths = ["tests"]
